
Download postgresql and set the password

after login pgAdmin4 create the database named as employee_management
set the password for database employee_management


// create Sequence first

CREATE SEQUENCE wcs00
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;

//After the role table


CREATE TABLE wcs_role (
    id INTEGER PRIMARY KEY,
    code varchar(100) NOT NULL,
    name VARCHAR(100) NOT NULL
);
// after create the wcs role
CREATE TABLE wcs_user (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(200) NOT NULL,
    last_name VARCHAR(100),
    password TEXT NOT NULL,
    email_address VARCHAR(100),
    phone NUMERIC,
    role_id INTEGER,
    employee_id VARCHAR(255),
    date_of_birth DATE,
    gender VARCHAR(10),
    job_title VARCHAR(100),
    department VARCHAR(100),
    date_of_joining DATE,
    employment_type VARCHAR(50),
    is_active BOOLEAN DEFAULT true,
    hourly_rate3 NUMERIC,
    benefit_class_code BIGINT,
    benefit_description TEXT,
    benefit_accrual_rate BIGINT,
    benefit_status VARCHAR(200),
    class_code BIGINT,
    class_description TEXT,
    class_accrual_rate BIGINT,
    class_status VARCHAR(200),
    supervisor_name VARCHAR(200),
    supervisor_report VARCHAR(200),
    is_supervisor BOOLEAN,
    photograph BYTEA,
    marital_status VARCHAR(200),
    ethnic_group VARCHAR(200),
    eeo_class TEXT,
    ssn TEXT,
    work_in_state BOOLEAN,
    live_in_state BOOLEAN,
    citizenship VARCHAR(200),
    emergency_contact VARCHAR(200),
    emergency_home_phone_number NUMERIC,
    emergency_work_phone NUMERIC,
    emergency_contact_relation VARCHAR(200),
    alter_emergency_contact NUMERIC,
    alter_emergency_home_phone_number NUMERIC,
    alter_emergency_work_phone NUMERIC,
    hourly_rate2 NUMERIC,
    middle_name VARCHAR(200),
    maiden_name VARCHAR(200),
    home_email VARCHAR(100),
    business_email VARCHAR(100),
    home_phone NUMERIC,
    business_phone NUMERIC,
    cell_phone NUMERIC,
    division VARCHAR(100),
    position VARCHAR(100),
    duty_type VARCHAR(50),
    hire_date DATE,
    original_hire_date DATE,
    termination_date DATE,
    termination_reason TEXT,
    voluntary_termination BOOLEAN,
    rehire_date DATE,
    rate_type VARCHAR(50),
    rate NUMERIC,
    pay_frequency VARCHAR(50),
    pay_frequency_text VARCHAR(100),
    home_department VARCHAR(100),
    department_text VARCHAR(100),
    zipcode NUMERIC,
    city VARCHAR(100),
    country VARCHAR(100)
);




// insert the data into wcs_role


INSERT INTO wcs_role (id, code, name) VALUES
(1, 'ADMIN', 'Administrator'),
(2, 'USER', 'Standard User'),
(3, 'MANAGER', 'Manager'),
(4, 'SUPPORT', 'Support Staff'),
(5, 'GUEST', 'Guest User');


Set up the application properties or application.yml

spring.datasource.url=jdbc:postgresql://localhost:5432/employee_management
spring.datasource.username=postgres
spring.datasource.password=9502

spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true

server.port=8080
server.servlet.context-path=/api

logging.level.root=INFO
logging.level.org.springframework.security=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

security.jwt.secret=my-secret-authentication-jwt-key-which-is-at-least-32-chars
security.jwt.expiration=3600000


Dependency need to be added

//


<dependencies>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-api</artifactId>
			<version>0.11.5</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-impl</artifactId>
			<version>0.11.5</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-jackson</artifactId>
			<version>0.11.5</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.thymeleaf.extras</groupId>
			<artifactId>thymeleaf-extras-springsecurity6</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		</<dependencies>
//



